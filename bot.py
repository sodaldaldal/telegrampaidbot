import os
import tempfile
import logging
from datetime import datetime, timedelta
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    LabeledPrice
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    PreCheckoutQueryHandler,
    MessageHandler,
    filters
)
from yt_dlp import YoutubeDL

from config import BOT_TOKEN, PAYMENT_PROVIDER_TOKEN, CHANNEL_ID

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–µ —Ç—Ä–æ–≥–∞–µ–º) ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
        [InlineKeyboardButton("üá∫üáø O'zbekcha", callback_data="lang_uz")],
    ]
    await update.message.reply_text(
        "üåê <b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:</b>",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

async def lang_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    lang = update.callback_query.data.split("_")[1]
    context.user_data['lang'] = lang
    keyboard = [[InlineKeyboardButton(s['title'], callback_data=f"svc_{i}")] for i, s in enumerate(services)]
    await update.callback_query.edit_message_text(
        "üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É / Xizmatni tanlang:</b>",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

async def service_selected(update: Update, context: ContextTypes.DEFAULT_TYPE): pass
async def back_to_services(update: Update, context: ContextTypes.DEFAULT_TYPE): pass
async def pay_click(update: Update, context: ContextTypes.DEFAULT_TYPE): pass
async def pay_manual(update: Update, context: ContextTypes.DEFAULT_TYPE): pass
async def pay_payme(update: Update, context: ContextTypes.DEFAULT_TYPE): pass
async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE): await update.pre_checkout_query.answer(ok=True)
async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE): pass

services = [
    {
        "title": "üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª",
        "desc": "üîê –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É Telegram-–∫–∞–Ω–∞–ª—É –Ω–∞ 30 –¥–Ω–µ–π.",
        "price": 500000,
        "channel_id": CHANNEL_ID,
    },
    {
        "title": "üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª | JafarFilm",
        "desc": "üìΩ –°—Å—ã–ª–∫–∞ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª.",
        "price": 0,
        "channel_id": CHANNEL_ID,
    },
    {
        "title": "üíª 10$ Adobe Creative Cloud + Epidemicsounds",
        "desc": "üé® –ê–∫–∫–∞—É–Ω—Ç –Ω–∞ –º–µ—Å—è—Ü —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ Adobe CC –∏ Epidemicsounds.",
        "price": 1200000,
        "channel_id": CHANNEL_ID,
    },
    {
        "title": "ü§ñ 5$ ChatGPT Plus + Sora",
        "desc": "üß† –î–æ—Å—Ç—É–ø –∫ ChatGPT Plus –∏ S–æ—Ä–∞.",
        "price": 600000,
        "channel_id": CHANNEL_ID,
    },
    {
        "title": "üìπ 5$ Google Veo 3 Access",
        "desc": "üé• –î–æ—Å—Ç—É–ø –∫ Google Veo 3.",
        "price": 600000,
        "channel_id": CHANNEL_ID,
    },
    {
        "title": "üìö –°–±–æ—Ä–Ω–∏–∫ | –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –ö–æ–Ω—Ç–µ–Ω—Ç–º–µ–π–∫–µ—Ä–∞",
        "desc": "üÜì –ü–æ–ª–µ–∑–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö.",
        "price": 0,
        "channel_id": CHANNEL_ID,
    },
    {
        "title": "üèÜ –°–±–æ—Ä–Ω–∏–∫ | –ü–ª–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –¥–ª—è –ö–æ–Ω—Ç–µ–Ω—Ç–º–µ–π–∫–µ—Ä–∞",
        "desc": "üíé –¢–æ–ø–æ–≤—ã–µ –ø–ª–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É.",
        "price": 300000,
        "channel_id": CHANNEL_ID,
    },
]


# --- –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: /download ---
async def download_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    if not msg:
        return
    if not context.args:
        return await msg.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /download <URL –≤–∏–¥–µ–æ>")
    url = context.args[0]

    await msg.reply_text("‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ, –ø–æ–¥–æ–∂–¥–∏‚Ä¶")
    with tempfile.TemporaryDirectory() as tmpdir:
        opts = {
            'format': 'bestvideo+bestaudio/best',
            'quiet': True,
            'outtmpl': os.path.join(tmpdir, '%(id)s.%(ext)s')
        }
        cookies = os.environ.get('YT_COOKIES_FILE')
        if cookies and os.path.exists(cookies):
            opts['cookiefile'] = cookies
        try:
            with YoutubeDL(opts) as ydl:
                info = ydl.extract_info(url, download=True)
                fp = ydl.prepare_filename(info)
            with open(fp, 'rb') as f:
                await msg.reply_video(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
            await msg.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# --- Entry point ---
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    # —Å–±—Ä–æ—Å webhooks –∏ —Å—Ç–∞—Ä—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
    app.bot.delete_webhook(drop_pending_updates=True)
    # —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(lang_select, pattern="^lang_"))
    app.add_handler(CallbackQueryHandler(service_selected, pattern="^svc_"))
    app.add_handler(CallbackQueryHandler(back_to_services, pattern="^back_to_services$"))
    app.add_handler(CallbackQueryHandler(pay_click, pattern="^pay_click_"))
    app.add_handler(CallbackQueryHandler(pay_manual, pattern="^pay_manual_"))
    app.add_handler(CallbackQueryHandler(pay_payme, pattern="^pay_payme_"))
    app.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))
    # –Ω–æ–≤—ã–π —Ö—ç–Ω–¥–ª–µ—Ä
    app.add_handler(CommandHandler('download', download_video))
    app.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    main()
