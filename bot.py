from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler

import os
TOKEN = os.environ["BOT_TOKEN"]

# –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥. –ü–æ–ª–µ price —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Å—É–º–∞—Ö (—É–º–Ω–æ–∂–µ–Ω–Ω–æ–µ –Ω–∞ 1000).
services = [
    {
        "title": "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª",
        "desc": "–î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É Telegram-–∫–∞–Ω–∞–ª—É –Ω–∞ 30 –¥–Ω–µ–π.",
        "price": 500000
    },
    {
        "title": "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª | JafarFilm",
        "desc": "–°—Å—ã–ª–∫–∞ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª.",
        "price": 0
    },
    {
        "title": "10$ Adobe + Epidemicsounds",
        "desc": "–ê–∫–∫–∞—É–Ω—Ç –Ω–∞ –º–µ—Å—è—Ü —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ Adobe –∏ Epidemicsounds.",
        "price": 1200000
    },
    {
        "title": "5$ ChatGPT Plus + Sora",
        "desc": "–î–æ—Å—Ç—É–ø –∫ ChatGPT Plus –∏ Sora.",
        "price": 600000
    },
    {
        "title": "5$ Google Veo 3 Access",
        "desc": "–î–æ—Å—Ç—É–ø –∫ Google Veo.",
        "price": 600000
    },
    {
        "title": "–°–±–æ—Ä–Ω–∏–∫ | –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –ö–æ–Ω—Ç–µ–Ω—Ç–º–µ–π–∫–µ—Ä–∞",
        "desc": "–ü–æ–ª–µ–∑–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö.",
        "price": 0
    },
    {
        "title": "–°–±–æ—Ä–Ω–∏–∫ | –ü–ª–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –¥–ª—è –ö–æ–Ω—Ç–µ–Ω—Ç–º–µ–π–∫–µ—Ä–∞",
        "desc": "–¢–æ–ø–æ–≤—ã–µ –ø–ª–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É.",
        "price": 300000
    }
]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ (—Ä—É—Å—Å–∫–∏–π –∏–ª–∏ —É–∑–±–µ–∫—Å–∫–∏–π).
    """
    keyboard = [
        [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="lang_ru")],
        [InlineKeyboardButton("O'zbekcha üá∫üáø", callback_data="lang_uz")]
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def lang_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —è–∑—ã–∫, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ context.user_data
    –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥.
    """
    query = update.callback_query
    await query.answer()

    lang = query.data.split("_")[1]  # "ru" –∏–ª–∏ "uz"
    context.user_data["lang"] = lang

    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —É—Å–ª—É–≥
    keyboard = [
        [InlineKeyboardButton(service["title"], callback_data=f"svc_{i}")]
        for i, service in enumerate(services)
    ]
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É / Xizmatni tanlang:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def service_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –æ–¥–Ω—É –∏–∑ —É—Å–ª—É–≥ (callback_data = "svc_{index}"),
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å —Ü–µ–Ω–æ–π.
    """
    query = update.callback_query
    await query.answer()

    index = int(query.data.split("_")[1])
    svc = services[index]

    # –í–æ—Ç –∑–¥–µ—Å—å –±—ã–ª —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–π –±–∞–≥: —Ä–∞–∑–±–∏—Ç–∏–µ f-—Å—Ç—Ä–æ–∫–∏ ¬´—Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ Enter¬ª
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∏—à–µ–º —á–µ—Ä–µ–∑ \n, —á—Ç–æ–±—ã Python –ø–æ–Ω–∏–º–∞–ª, –≥–¥–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏.
    message = (
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {svc['title']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {svc['desc']}\n"
        f"–¶–µ–Ω–∞: {svc['price'] // 1000} —Å—É–º"
    )

    await query.edit_message_text(message)


def main():
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: —Å–æ–∑–¥–∞—ë–º Application, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ–º polling.
    """
    app = ApplicationBuilder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    app.add_handler(CommandHandler("start", start))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –ø–æ inline-–∫–Ω–æ–ø–∫–∞–º
    app.add_handler(CallbackQueryHandler(lang_select, pattern="^lang_"))
    app.add_handler(CallbackQueryHandler(service_selected, pattern="^svc_"))

    app.run_polling()


if __name__ == "__main__":
    main()
