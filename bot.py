from pyrogram import Client, filters
from pyrogram.types import (
    Message, InlineKeyboardMarkup, InlineKeyboardButton,
    LabeledPrice, PreCheckoutQuery, Invoice
)
import json
import time
from config import API_ID, API_HASH, BOT_TOKEN, CHANNEL_ID, PAYMENT_PROVIDER_TOKEN

app = Client("paid_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

DB_FILE = "database.json"

def load_users():
    try:
        with open(DB_FILE, "r") as f:
            return json.load(f)
    except:
        return {}

def save_users(users):
    with open(DB_FILE, "w") as f:
        json.dump(users, f)

@app.on_message(filters.command("start"))
async def start(client, message: Message):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π", callback_data="buy_access")]
    ])
    await message.reply(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª –Ω–∞ 30 –¥–Ω–µ–π.",
        reply_markup=keyboard
    )

@app.on_callback_query(filters.regex("buy_access"))
async def buy_access(client, callback_query):
    await client.send_invoice(
        chat_id=callback_query.from_user.id,
        title="–î–æ—Å—Ç—É–ø –≤ –∫–∞–Ω–∞–ª –Ω–∞ 30 –¥–Ω–µ–π",
        description="–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –∑–∞–∫—Ä—ã—Ç—ã–π Telegram-–∫–∞–Ω–∞–ª.",
        payload="monthly_access",
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency="RUB",
        prices=[LabeledPrice("–ü–æ–¥–ø–∏—Å–∫–∞", 19900)],
        start_parameter="access-subscription",
    )
    await callback_query.answer()

@app.on_pre_checkout_query()
async def pre_checkout(client, query: PreCheckoutQuery):
    await query.answer(ok=True)

@app.on_message(filters.successful_payment)
async def successful_payment(client, message: Message):
    user_id = message.from_user.id
    users = load_users()
    users[str(user_id)] = int(time.time()) + 30 * 24 * 60 * 60
    save_users(users)

    try:
        await client.add_chat_members(CHANNEL_ID, [user_id])
        await message.reply("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –Ω–∞ 30 –¥–Ω–µ–π.")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–∞–Ω–∞–ª: {e}")

@app.on_message(filters.command("check"))
async def check(client, message: Message):
    user_id = message.from_user.id
    users = load_users()
    expire = users.get(str(user_id))

    if expire and expire > int(time.time()):
        remaining = int((expire - time.time()) / 86400)
        await message.reply(f"‚úÖ –£ —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø. –û—Å—Ç–∞–ª–æ—Å—å {remaining} –¥–Ω–µ–π.")
    else:
        await message.reply("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –æ–Ω –∏—Å—Ç—ë–∫.")

app.run()
