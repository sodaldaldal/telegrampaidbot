import os
from datetime import datetime, timedelta

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    LabeledPrice,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    PreCheckoutQueryHandler,
    MessageHandler,
    filters,
)

from config import BOT_TOKEN, PAYMENT_PROVIDER_TOKEN, CHANNEL_ID

import tempfile
import logging
from yt_dlp import YoutubeDL

# Logging setup
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


services = [
    {
        "title": "üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª",
        "desc": "üîê –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É Telegram-–∫–∞–Ω–∞–ª—É –Ω–∞ 30 –¥–Ω–µ–π.",
        "price": 500000,
        "channel_id": CHANNEL_ID,
    },
    {
        "title": "üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª | JafarFilm",
        "desc": "üìΩ –°—Å—ã–ª–∫–∞ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª.",
        "price": 0,
        "channel_id": CHANNEL_ID,
    },
    {
        "title": "üíª 10$ Adobe Creative Cloud + Epidemicsounds",
        "desc": "üé® –ê–∫–∫–∞—É–Ω—Ç –Ω–∞ –º–µ—Å—è—Ü —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ Adobe CC –∏ Epidemicsounds.",
        "price": 1200000,
        "channel_id": CHANNEL_ID,
    },
    {
        "title": "ü§ñ 5$ ChatGPT Plus + Sora",
        "desc": "üß† –î–æ—Å—Ç—É–ø –∫ ChatGPT Plus –∏ S–æ—Ä–∞.",
        "price": 600000,
        "channel_id": CHANNEL_ID,
    },
    {
        "title": "üìπ 5$ Google Veo 3 Access",
        "desc": "üé• –î–æ—Å—Ç—É–ø –∫ Google Veo 3.",
        "price": 600000,
        "channel_id": CHANNEL_ID,
    },
    {
        "title": "üìö –°–±–æ—Ä–Ω–∏–∫ | –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –ö–æ–Ω—Ç–µ–Ω—Ç–º–µ–π–∫–µ—Ä–∞",
        "desc": "üÜì –ü–æ–ª–µ–∑–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö.",
        "price": 0,
        "channel_id": CHANNEL_ID,
    },
    {
        "title": "üèÜ –°–±–æ—Ä–Ω–∏–∫ | –ü–ª–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –¥–ª—è –ö–æ–Ω—Ç–µ–Ω—Ç–º–µ–π–∫–µ—Ä–∞",
        "desc": "üíé –¢–æ–ø–æ–≤—ã–µ –ø–ª–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É.",
        "price": 300000,
        "channel_id": CHANNEL_ID,
    },
]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
        [InlineKeyboardButton("üá∫üáø O'zbekcha", callback_data="lang_uz")],
    ]
    await update.message.reply_text(
        "üåê <b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:</b>",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML",
    )


async def lang_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    lang = query.data.split("_")[1]
    context.user_data["lang"] = lang

    keyboard = [
        [InlineKeyboardButton(service["title"], callback_data=f"svc_{i}")]
        for i, service in enumerate(services)
    ]
    await query.edit_message_text(
        "üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É / Xizmatni tanlang:</b>",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML",
    )


async def service_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    index = int(query.data.split("_")[1])
    svc = services[index]
    # –µ—Å–ª–∏ —Ü–µ–Ω–∞ –≤ —Ç–∏—ã–Ω–∞—Ö, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É–º–º—É –≤ —Ç—ã—Å—è—á–∞—Ö —Å—É–º
    price_sum = svc["price"] // 1000 if svc["price"] else 0

    invoice_text = (
        "üßæ <b>–ß–µ–∫ –∑–∞–∫–∞–∑–∞:</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–∏–∂–µ ‚¨áÔ∏è"
    )

    pay_keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å Click", callback_data=f"pay_click_{index}")],
        [InlineKeyboardButton("üè¶ –û–ø–ª–∞—Ç–∞ –≤—Ä—É—á–Ω—É—é", callback_data=f"pay_manual_{index}")],
        [InlineKeyboardButton("üì≤ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Payme", callback_data=f"pay_payme_{index}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º", callback_data="back_to_services")],
    ]

    await query.edit_message_text(
        invoice_text,
        reply_markup=InlineKeyboardMarkup(pay_keyboard),
        parse_mode="HTML",
        disable_web_page_preview=True,
    )


async def back_to_services(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton(service["title"], callback_data=f"svc_{i}")]
        for i, service in enumerate(services)
    ]
    await query.edit_message_text(
        "üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É / Xizmatni tanlang:</b>",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML",
    )


async def pay_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "‚ÑπÔ∏è <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Click</b> –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–ø—Ü–∏—è –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç!",
        parse_mode="HTML",
    )


async def pay_manual(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    idx = int(query.data.split("_")[2])
    svc = services[idx]
    price_sum = svc["price"] // 1000 if svc["price"] else 0

    manual_text = (
        f"üè¶ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä—É—á–Ω–æ–π –æ–ø–ª–∞—Ç–µ</b>\n\n"
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{svc['title']}</b> (—Å—Ç–æ–∏–º–æ—Å—Ç—å <b>{price_sum} 000 —Å—É–º</b>).\n\n"
        f"1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ <b>{price_sum} 000 —Å—É–º</b> –Ω–∞:\n"
        "   ‚Ä¢ <b>–ö–∞—Ä—Ç–∞:</b> 1234 5678 9012 3456\n"
        "   ‚Ä¢ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω\n"
        f"   ‚Ä¢ <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:</b> –û–ø–ª–∞—Ç–∞ –∑–∞ ¬´{svc['title']}¬ª\n\n"
        "2. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω –≤ —á–∞—Ç. –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –∏ –æ—Ç–∫—Ä–æ–µ–º –¥–æ—Å—Ç—É–ø.\n"
        "   –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @VashaPodderzhka"
    )

    await query.edit_message_text(manual_text, parse_mode="HTML")


async def pay_payme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    idx = int(query.data.split("_")[2])
    svc = services[idx]

    # –ï—Å–ª–∏ —É—Å–ª—É–≥–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è, —Å—Ä–∞–∑—É –≤—ã–¥–∞—ë–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    if svc["price"] == 0:
        invite_link = await make_one_time_invite_link(context, svc["channel_id"])
        keyboard = [[InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=invite_link)]]
        await query.edit_message_text(
            "‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø. –ñ–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML",
        )
        return

    amount_tiyin = svc["price"] * 100  # –≤ —Ç–∏—ã–Ω–∞—Ö
    title = svc["title"]
    description = svc["desc"]
    payload = f"payload_service_{idx}"
    currency = "UZS"
    prices = [LabeledPrice(label=title, amount=amount_tiyin)]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º invoice
    await query.message.reply_invoice(
        title=title,
        description=description,
        payload=payload,
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency=currency,
        prices=prices,
        start_parameter=f"start_{idx}",
    )


async def make_one_time_invite_link(context, chat_id: int) -> str:
    expire_unix = int((datetime.utcnow() + timedelta(hours=24)).timestamp())
    link_obj = await context.bot.create_chat_invite_link(
        chat_id=chat_id,
        expire_date=expire_unix,
        member_limit=1,
    )
    return link_obj.invite_link


async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.pre_checkout_query.answer(ok=True)


async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    payment = update.message.successful_payment.to_dict()
    chat_id = update.message.chat.id
    payload = payment.get("invoice_payload", "")
    try:
        idx = int(payload.split("_")[-1])
    except Exception:
        idx = None

    if idx is not None and 0 <= idx < len(services):
        svc = services[idx]
        invite_link = await make_one_time_invite_link(context, svc["channel_id"])
        keyboard = [[InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=invite_link)]]
        await context.bot.send_message(
            chat_id=chat_id,
            text="üéâ <b>–ü–ª–∞—Ç—ë–∂ –ø—Ä–∏–Ω—è—Ç!</b>\n\n–ñ–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML",
        )
        return

    await context.bot.send_message(
        chat_id=chat_id,
        text="üéâ <b>–ü–ª–∞—Ç—ë–∂ –ø—Ä–∏–Ω—è—Ç —É—Å–ø–µ—à–Ω–æ!</b>\n–î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä–æ–µ–º –≤—Ä—É—á–Ω—É—é.",
        parse_mode="HTML",
    )



async def download_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # /download <url>
    if not context.args:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /download <URL –≤–∏–¥–µ–æ>")
    url = context.args[0]
    await update.message.reply_text("‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ, –ø–æ–¥–æ–∂–¥–∏‚Ä¶")

    with tempfile.TemporaryDirectory() as tmpdir:
        opts = {
            'format': 'bestvideo+bestaudio/best',
            'quiet': True,
            'outtmpl': os.path.join(tmpdir, '%(id)s.%(ext)s'),
        }
        try:
            with YoutubeDL(opts) as ydl:
                info = ydl.extract_info(url, download=True)
                filepath = ydl.prepare_filename(info)

            with open(filepath, 'rb') as video_file:
                await update.message.reply_video(video_file)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )

def main():
    # –°—Ç—Ä–æ–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(lang_select, pattern="^lang_"))
    app.add_handler(CallbackQueryHandler(service_selected, pattern="^svc_"))
    app.add_handler(CallbackQueryHandler(back_to_services, pattern="^back_to_services$"))
    app.add_handler(CallbackQueryHandler(pay_click, pattern="^pay_click_"))
    app.add_handler(CallbackQueryHandler(pay_manual, pattern="^pay_manual_"))
    app.add_handler(CallbackQueryHandler(pay_payme, pattern="^pay_payme_"))
    app.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))
    # –ù–æ–≤—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ
    app.add_handler(CommandHandler('download', download_video))

    # –ó–∞–ø—É—Å–∫–∞–µ–º polling; drop_pending_updates=True —Å–±—Ä–æ—Å–∏—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∞–ø–¥–µ–π—Ç—ã
    app.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    main()
