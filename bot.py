import os
from datetime import datetime, timedelta
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    LabeledPrice,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    PreCheckoutQueryHandler,
    MessageHandler,
    filters,
)

# ------------------------------------------------------------------
# 1) –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –∫–æ–Ω—Ñ–∏–≥ –∏–∑ config.py
# ------------------------------------------------------------------
from config import BOT_TOKEN, PAYMENT_PROVIDER_TOKEN, CHANNEL_ID

# ------------------------------------------------------------------
# 2) –û–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö —É—Å–ª—É–≥ (–∫–∞–∂–¥–∞—è —É—Å–ª—É–≥–∞ ‚Äî title, desc, price –≤ —Å—É–º–∞—Ö)
#    –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –¥–æ–ø–∏—Å–∞—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–π —É—Å–ª—É–≥–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π channel_id,
#    –Ω–æ –≤ –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –≤—Å–µ –æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–µ —É—Å–ª—É–≥–∏ –≤–µ–¥—É—Ç –≤ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª: CHANNEL_ID.
# ------------------------------------------------------------------
services = [
    {
        "title": "üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª",
        "desc": "üîê –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É Telegram-–∫–∞–Ω–∞–ª—É –Ω–∞ 30 –¥–Ω–µ–π.",
        "price": 500000,  # —Å—É–º–º–∞ –≤ UZS (500 000 —Å—É–º)
        "channel_id": CHANNEL_ID,
    },
    {
        "title": "üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª | JafarFilm",
        "desc": "üìΩ –°—Å—ã–ª–∫–∞ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª.",
        "price": 0,
        "channel_id": CHANNEL_ID,
    },
    {
        "title": "üíª 10$ Adobe Creative Cloud + Epidemicsounds",
        "desc": "üé® –ê–∫–∫–∞—É–Ω—Ç –Ω–∞ –º–µ—Å—è—Ü —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ Adobe CC –∏ Epidemicsounds.",
        "price": 1200000,  # 1 200 000 —Å—É–º
        "channel_id": CHANNEL_ID,
    },
    {
        "title": "ü§ñ 5$ ChatGPT Plus + Sora",
        "desc": "üß† –î–æ—Å—Ç—É–ø –∫ ChatGPT Plus –∏ Sora.",
        "price": 600000,
        "channel_id": CHANNEL_ID,
    },
    {
        "title": "üìπ 5$ Google Veo 3 Access",
        "desc": "üé• –î–æ—Å—Ç—É–ø –∫ Google Veo 3.",
        "price": 600000,
        "channel_id": CHANNEL_ID,
    },
    {
        "title": "üìö –°–±–æ—Ä–Ω–∏–∫ | –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –ö–æ–Ω—Ç–µ–Ω—Ç–º–µ–π–∫–µ—Ä–∞",
        "desc": "üÜì –ü–æ–ª–µ–∑–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö.",
        "price": 0,
        "channel_id": CHANNEL_ID,
    },
    {
        "title": "üèÜ –°–±–æ—Ä–Ω–∏–∫ | –ü–ª–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –¥–ª—è –ö–æ–Ω—Ç–µ–Ω—Ç–º–µ–π–∫–µ—Ä–∞",
        "desc": "üíé –¢–æ–ø–æ–≤—ã–µ –ø–ª–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É.",
        "price": 300000,
        "channel_id": CHANNEL_ID,
    },
]

# ------------------------------------------------------------------
# 3) /start ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
# ------------------------------------------------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
        [InlineKeyboardButton("üá∫üáø O'zbekcha", callback_data="lang_uz")],
    ]
    await update.message.reply_text(
        "üåê <b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:</b>",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML",
    )

# ------------------------------------------------------------------
# 4) –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –∏ –≤—ã–≤–æ–¥–∏–º –º–µ–Ω—é —É—Å–ª—É–≥
# ------------------------------------------------------------------
async def lang_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    lang = query.data.split("_")[1]  # "ru" –∏–ª–∏ "uz"
    context.user_data["lang"] = lang

    keyboard = [
        [InlineKeyboardButton(service["title"], callback_data=f"svc_{i}")]
        for i, service in enumerate(services)
    ]
    await query.edit_message_text(
        "üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É / Xizmatni tanlang:</b>",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML",
    )

# ------------------------------------------------------------------
# 5) –ü—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Å–ª—É–≥–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´—á–µ–∫¬ª + –∫–Ω–æ–ø–∫–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
# ------------------------------------------------------------------
async def service_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    index = int(query.data.split("_")[1])
    svc = services[index]
    price_sum = svc["price"] // 1000 if svc["price"] else 0  # –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äúxxx 000 —Å—É–º‚Äù

    invoice_text = (
        "üßæ <b>–ß–µ–∫ –∑–∞–∫–∞–∑–∞:</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–∏–∂–µ ‚¨áÔ∏è"
    )

    pay_keyboard = [
        [
            InlineKeyboardButton(
                "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å Click", callback_data=f"pay_click_{index}"
            )
        ],
        [
            InlineKeyboardButton(
                "üè¶ –û–ø–ª–∞—Ç–∞ –≤—Ä—É—á–Ω—É—é", callback_data=f"pay_manual_{index}"
            )
        ],
        [
            InlineKeyboardButton(
                "üì≤ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Payme", callback_data=f"pay_payme_{index}"
            )
        ],
        [
            InlineKeyboardButton(
                "üîô –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º", callback_data="back_to_services"
            )
        ],
    ]

    await query.edit_message_text(
        invoice_text,
        reply_markup=InlineKeyboardMarkup(pay_keyboard),
        parse_mode="HTML",
        disable_web_page_preview=True,
    )

# ------------------------------------------------------------------
# 6) –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
# ------------------------------------------------------------------
async def back_to_services(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton(service["title"], callback_data=f"svc_{i}")]
        for i, service in enumerate(services)
    ]
    await query.edit_message_text(
        "üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É / Xizmatni tanlang:</b>",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML",
    )

# ------------------------------------------------------------------
# 7) Click‚Äî–∑–∞–≥–ª—É—à–∫–∞
# ------------------------------------------------------------------
async def pay_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    await query.edit_message_text(
        "‚ÑπÔ∏è <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Click</b> –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.

"
        "–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–ø—Ü–∏—è –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç!",
        parse_mode="HTML",
    )

# ------------------------------------------------------------------
# 8) –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ¬´–û–ø–ª–∞—Ç–∞ –≤—Ä—É—á–Ω—É—é¬ª
# ------------------------------------------------------------------
async def pay_manual(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    idx = int(query.data.split("_")[2])
    svc = services[idx]
    price_sum = svc["price"] // 1000 if svc["price"] else 0

    manual_text = (
        f"üè¶ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä—É—á–Ω–æ–π –æ–ø–ª–∞—Ç–µ</b>

"
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{svc['title']}</b> (—Å—Ç–æ–∏–º–æ—Å—Ç—å <b>{price_sum} 000 —Å—É–º</b>).

"
        f"1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ <b>{price_sum} 000 —Å—É–º</b> –Ω–∞ –æ–¥–∏–Ω –∏–∑ —Å—á–µ—Ç–æ–≤:
"
        f"   ‚Ä¢ <b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> 1234 5678 9012 3456
"
        f"   ‚Ä¢ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á
"
        f"   ‚Ä¢ <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:</b> –û–ø–ª–∞—Ç–∞ –∑–∞ ¬´{svc['title']}¬ª

"
        f"2. –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç/—á–µ–∫ –≤ —ç—Ç–æ—Ç —á–∞—Ç.
"
        f"   –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø–ª–∞—Ç—ë–∂ –∏ –≤—Ä—É—á–Ω—É—é –≤—ã–¥–∞—Å—Ç –¥–æ—Å—Ç—É–ø.

"
        f"–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @VashaPodderzhka"
    )

    await query.edit_message_text(manual_text, parse_mode="HTML")

# ------------------------------------------------------------------
# 9) –û–±—Ä–∞–±–æ—Ç–∫–∞ ¬´–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Payme¬ª (Telegram-–∏–Ω–≤–æ–π—Å)
# ------------------------------------------------------------------
async def pay_payme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    idx = int(query.data.split("_")[2])
    svc = services[idx]

    # –ï—Å–ª–∏ —Ü–µ–Ω–∞ = 0, –≤—ã–¥–∞—ë–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É —Å—Ä–∞–∑—É
    if svc["price"] == 0:
        invite_link = await make_one_time_invite_link(context, svc["channel_id"])
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫—É
        keyboard = [
            [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=invite_link)]
        ]
        await query.edit_message_text(
            "‚úÖ –≠—Ç–∞ —É—Å–ª—É–≥–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML",
        )
        return

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞
    amount_tiyin = svc["price"] * 100  # –ø–µ—Ä–µ–≤–æ–¥–∏–º —Å—É–º—ã –≤ —Ç–∏–π–∏–Ω—ã
    title = svc["title"]
    description = svc["desc"]
    payload = f"payload_service_{idx}"
    provider_token = PAYMENT_PROVIDER_TOKEN
    currency = "UZS"
    prices = [LabeledPrice(label=title, amount=amount_tiyin)]

    await query.message.reply_invoice(
        title=title,
        description=description,
        payload=payload,
        provider_token=provider_token,
        currency=currency,
        prices=prices,
        start_parameter=f"start_{idx}",
    )

# ------------------------------------------------------------------
# 10) –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–π –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
# ------------------------------------------------------------------
async def make_one_time_invite_link(context: ContextTypes.DEFAULT_TYPE, chat_id: int) -> str:
    """
    –°–æ–∑–¥–∞—ë—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É —Å member_limit=1 –∏ expire_date —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º—É —Å—Å—ã–ª–∫—É (invite_link).
    """
    expire_unix = int((datetime.utcnow() + timedelta(hours=24)).timestamp())

    link_obj = await context.bot.create_chat_invite_link(
        chat_id=chat_id,
        expire_date=expire_unix,
        member_limit=1,
    )
    return link_obj.invite_link

# ------------------------------------------------------------------
# 11) pre_checkout_query –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
# ------------------------------------------------------------------
async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.pre_checkout_query.answer(ok=True)

# ------------------------------------------------------------------
# 12) –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤—ã–¥–∞—ë–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É-–∫–Ω–æ–ø–∫—É
# ------------------------------------------------------------------
async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    payment = update.message.successful_payment.to_dict()
    chat_id = update.message.chat.id
    payload = payment.get("invoice_payload", "")
    try:
        idx = int(payload.split("_")[-1])
    except (ValueError, IndexError):
        idx = None

    # –ï—Å–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏ –∏–Ω–¥–µ–∫—Å —É—Å–ª—É–≥–∏ –∏ —É –Ω–µ—ë –µ—Å—Ç—å channel_id
    if idx is not None and 0 <= idx < len(services):
        svc = services[idx]
        channel_id = svc.get("channel_id")
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É
        invite_link = await make_one_time_invite_link(context, channel_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É ¬´–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª¬ª
        keyboard = [
            [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=invite_link)]
        ]
        await context.bot.send_message(
            chat_id=chat_id,
            text=(
                f"üéâ <b>–ü–ª–∞—Ç—ë–∂ –ø—Ä–∏–Ω—è—Ç!</b>

"
                f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª:"
            ),
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML",
        )
        return

    # –ï—Å–ª–∏ payload –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª—Å—è, –ø—Ä–æ—Å—Ç–æ –±–ª–∞–≥–æ–¥–∞—Ä–∏–º
    await context.bot.send_message(
        chat_id=chat_id,
        text="üéâ <b>–ü–ª–∞—Ç—ë–∂ –ø—Ä–∏–Ω—è—Ç —É—Å–ø–µ—à–Ω–æ!</b>
–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É. –î–æ—Å—Ç—É–ø –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º –≤—Ä—É—á–Ω—É—é.",
        parse_mode="HTML",
    )

# ------------------------------------------------------------------
# 13) –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ------------------------------------------------------------------
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # /start
    app.add_handler(CommandHandler("start", start))

    # –í—ã–±–æ—Ä —è–∑—ã–∫–∞
    app.add_handler(CallbackQueryHandler(lang_select, pattern="^lang_"))

    # –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏
    app.add_handler(CallbackQueryHandler(service_selected, pattern="^svc_"))

    # –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥
    app.add_handler(CallbackQueryHandler(back_to_services, pattern="^back_to_services$"))

    # Click (–∑–∞–≥–ª—É—à–∫–∞)
    app.add_handler(CallbackQueryHandler(pay_click, pattern="^pay_click_"))

    # –û–ø–ª–∞—Ç–∞ –≤—Ä—É—á–Ω—É—é
    app.add_handler(CallbackQueryHandler(pay_manual, pattern="^pay_manual_"))

    # –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Payme
    app.add_handler(CallbackQueryHandler(pay_payme, pattern="^pay_payme_"))

    # pre_checkout_query
    app.add_handler(PreCheckoutQueryHandler(precheckout_callback))

    # –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))

    app.run_polling()

if __name__ == "__main__":
    main()