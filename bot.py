
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler

TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"

services = [
    {
        "title": "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª",
        "desc": "–î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É Telegram-–∫–∞–Ω–∞–ª—É –Ω–∞ 30 –¥–Ω–µ–π.",
        "price": 500000
    },
    {
        "title": "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª | JafarFilm",
        "desc": "–°—Å—ã–ª–∫–∞ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª.",
        "price": 0
    },
    {
        "title": "10$ Adobe + Epidemicsounds",
        "desc": "–ê–∫–∫–∞—É–Ω—Ç –Ω–∞ –º–µ—Å—è—Ü —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ Adobe –∏ Epidemicsounds.",
        "price": 1200000
    },
    {
        "title": "5$ ChatGPT Plus + Sora",
        "desc": "–î–æ—Å—Ç—É–ø –∫ ChatGPT Plus –∏ Sora.",
        "price": 600000
    },
    {
        "title": "5$ Google Veo 3 Access",
        "desc": "–î–æ—Å—Ç—É–ø –∫ Google Veo.",
        "price": 600000
    },
    {
        "title": "–°–±–æ—Ä–Ω–∏–∫ | –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –ö–æ–Ω—Ç–µ–Ω—Ç–º–µ–π–∫–µ—Ä–∞",
        "desc": "–ü–æ–ª–µ–∑–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã.",
        "price": 0
    },
    {
        "title": "–°–±–æ—Ä–Ω–∏–∫ | –ü–ª–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –¥–ª—è –ö–æ–Ω—Ç–µ–Ω—Ç–º–µ–π–∫–µ—Ä–∞",
        "desc": "–¢–æ–ø–æ–≤—ã–µ –∫—É—Ä—Å—ã –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É.",
        "price": 300000
    }
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="lang_ru")],
        [InlineKeyboardButton("O'zbekcha üá∫üáø", callback_data="lang_uz")]
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:", reply_markup=InlineKeyboardMarkup(keyboard))

async def lang_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    lang = query.data.split("_")[1]
    context.user_data["lang"] = lang

    keyboard = [[InlineKeyboardButton(service["title"], callback_data=f"svc_{i}")] for i, service in enumerate(services)]
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É / Xizmatni tanlang:", reply_markup=InlineKeyboardMarkup(keyboard))

async def service_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    index = int(query.data.split("_")[1])
    svc = services[index]

    message = (
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {svc['title']}
"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {svc['desc']}
"
        f"–¶–µ–Ω–∞: {svc['price'] // 1000} —Å—É–º"
    )

    await query.edit_message_text(message)

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(lang_select, pattern="^lang_"))
    app.add_handler(CallbackQueryHandler(service_selected, pattern="^svc_"))
    app.run_polling()

if __name__ == "__main__":
    main()
