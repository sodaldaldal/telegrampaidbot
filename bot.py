from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler

import os
TOKEN = os.environ["BOT_TOKEN"]

services = [
    {
        "title": "üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª",
        "desc": "üîê –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É Telegram-–∫–∞–Ω–∞–ª—É –Ω–∞ 30 –¥–Ω–µ–π.",
        "price": 500000
    },
    {
        "title": "üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª | JafarFilm",
        "desc": "üìΩ –°—Å—ã–ª–∫–∞ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª.",
        "price": 0
    },
    {
        "title": "üíª 10$ Adobe + Epidemicsounds",
        "desc": "üé® –ê–∫–∫–∞—É–Ω—Ç –Ω–∞ –º–µ—Å—è—Ü —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ Adobe –∏ Epidemicsounds.",
        "price": 1200000
    },
    {
        "title": "ü§ñ 5$ ChatGPT Plus + Sora",
        "desc": "üß† –î–æ—Å—Ç—É–ø –∫ ChatGPT Plus –∏ Sora.",
        "price": 600000
    },
    {
        "title": "üìπ 5$ Google Veo 3 Access",
        "desc": "üé• –î–æ—Å—Ç—É–ø –∫ Google Veo.",
        "price": 600000
    },
    {
        "title": "üìö –°–±–æ—Ä–Ω–∏–∫ | –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –ö–æ–Ω—Ç–µ–Ω—Ç–º–µ–π–∫–µ—Ä–∞",
        "desc": "üÜì –ü–æ–ª–µ–∑–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö.",
        "price": 0
    },
    {
        "title": "üèÜ –°–±–æ—Ä–Ω–∏–∫ | –ü–ª–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –¥–ª—è –ö–æ–Ω—Ç–µ–Ω—Ç–º–µ–π–∫–µ—Ä–∞",
        "desc": "üíé –¢–æ–ø–æ–≤—ã–µ –ø–ª–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É.",
        "price": 300000
    }
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ (—Ä—É—Å—Å–∫–∏–π –∏–ª–∏ —É–∑–±–µ–∫—Å–∫–∏–π) —Å —ç–º–æ–¥–∑–∏.
    """
    keyboard = [
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
        [InlineKeyboardButton("üá∫üáø O'zbekcha", callback_data="lang_uz")]
    ]
    await update.message.reply_text(
        "üåê <b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:</b>",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

async def lang_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ —Å —ç–º–æ–¥–∑–∏.
    """
    query = update.callback_query
    await query.answer()

    lang = query.data.split("_")[1]  # "ru" –∏–ª–∏ "uz"
    context.user_data["lang"] = lang

    keyboard = [
        [InlineKeyboardButton(service["title"], callback_data=f"svc_{i}")]
        for i, service in enumerate(services)
    ]
    await query.edit_message_text(
        "üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É / Xizmatni tanlang:</b>",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

async def service_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Å–ª—É–≥–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —ç–º–æ–¥–∑–∏ –∏ HTML-–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º.
    """
    query = update.callback_query
    await query.answer()

    index = int(query.data.split("_")[1])
    svc = services[index]

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Ç–µ–≥–∏ –∏ —ç–º–æ–¥–∑–∏ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞
    message = (
        f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {svc['title']}\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {svc['desc']}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {svc['price'] // 1000} —Å—É–º"
    )

    await query.edit_message_text(
        message,
        parse_mode="HTML"
    )

def main():
    """
    –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞.
    """
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(lang_select, pattern="^lang_"))
    app.add_handler(CallbackQueryHandler(service_selected, pattern="^svc_"))

    app.run_polling()

if __name__ == "__main__":
    main()
